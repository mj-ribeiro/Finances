res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
res$values
res$values[length(res$values)]
w = runif(length(assets), 0, 1)
w = w/sum(w)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', v1)
cat('A variância do modelo é dada por:', round(v1,5) )
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[1;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', round(v1,6))
data.frame(pes, assets)
data.frame(assets, pes)
res = data.frame(assets, pes)
View(res)
markowitz = function(x){
v = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
}
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(20000)
res = t(res)
row.names(res) = assets
res[which.max(res), ]
res[which.min(res), ]
res = markowitz(50000)
w = runif(length(assets), 0, 1)
w = w/sum(w)
res = solnp(w,      #starting values
markowitz2,   #function to optimise
eqfun=eq,     #equality function
eqB=1,        #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', round(v1,6))
cat(res1)
res1 = data.frame(assets, pes)
cat(res1)
print(res1)
#************************************************************************************
#                               MARKOWITZ MODEL
#************************************************************************************
setwd("D:/Git projects/Finance/Finance_R")
library(tseries)
library(timeSeries)
library(fGarch)
library(quantmod)
#----------- My function to get data
get_data = function(x, d= "2000-01-01"){
z = getSymbols(x, src='yahoo',
from= d,
periodicity = "monthly",
auto.assign = F)[,4]
return(z)
}
#************ Assets that i want
assets = c("VALE3.SA", "PETR4.SA", "PETR3.SA", "ABEV3.SA", "BBAS3.SA", "ITSA4.SA",
"LREN3.SA","BBDC3.SA", "BRFS3.SA", "WEGE3.SA", "RADL3.SA", "VIVT4.SA", "SBSP3.SA",
"LAME4.SA","EMBR3.SA", "CMIG4.SA", "VVAR3.SA", "ELET3.SA", "CSNA3.SA", "CYRE3.SA",
"ENBR3.SA","USIM5.SA", "HGTX3.SA")
df = data.frame(lapply(assets, get_data))
#******* replace nas by mean
for(i in 1:length(df)){
df[ ,i] = ifelse(is.na(df[,i]),
(mean(df[,i], na.rm = T)),
df[,i] )
}
basicStats(df)
nl = sum((df[,1]>0)*1)
df = df[-nl,]
nl = sum((df[,1]>0)*1)
#*********** calculating returs
ret = data.frame(matrix(nrow =(nl-1), ncol=length(assets)))
for(i in 1:length(assets)){
ret[ ,i] = diff(log(df[,i]))
}
colnames(ret) = assets
mean(ret[ ,i]
mean(ret[ ,i])
mean(ret[ ,i])
mean(ret)
#*********** Algorithm
mean(ret[,])
#*********** Algorithm
mean(ret[,1:23])
#*********** Algorithm
mean(ret[ ,1:23])
View(ret)
mean(ret[ ,1])
mean(ret[ ,2])
mean(ret[ ,2:3])
for (j in 1:length(assets)){
mean_ret = mean(ret[ ,j])
}
for (j in 1:length(assets)){
mean_ret[j] = mean(ret[ ,j])
}
markowitz = function(x){
v = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(e, v, col='blue')
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
plot(v, e, col='blue')
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue')
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
plot(v, e, col='blue', xlab='Variance', )
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue', xlab='Variance', )
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue', xlab='Variance', ylab='Expected return', type='p')
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue', xlab='Variance', ylab='Expected return', type='p', bty='l')
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(10000)
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue', xlab='Variance', ylab='Expected return', type='p', pch=19)
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(100)
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue', xlab='Variance', ylab='Expected return', type='p', las=2)
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(100)
plot(rnorm(10), rnorm(10), pch=1)
plot(rnorm(10), rnorm(10), pch=3)
plot(rnorm(10), rnorm(10), pch=2)
plot(rnorm(10), rnorm(10), pch=1)
plot(rnorm(10), rnorm(10), pch=2)
plot(rnorm(10), rnorm(10), pch=3)
plot(rnorm(10), rnorm(10), pch=4)
plot(rnorm(10), rnorm(10), pch=5)
plot(rnorm(10), rnorm(10), pch=6)
plot(rnorm(10), rnorm(10), pch=7)
plot(rnorm(10), rnorm(10), pch=8)
plot(rnorm(10), rnorm(10), pch=1, las=1)
plot(rnorm(10), rnorm(10), pch=1, las=1, type='s')
plot(rnorm(10), rnorm(10), pch=1, las=1, type='p')
plot(rnorm(10), rnorm(10), pch=1, las=1, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=19, las=1, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=1, type='p', col='red')
markowitz = function(x){
v = c()
e = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
e[i] = w[i, ]%*%mean_ret
}
plot(v, e, col='blue', xlab='Variance', ylab='Expected return', pch=20)
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(100)
plot(rnorm(10), rnorm(10), pch=30, las=1, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=25, las=1, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=1, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=10, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=6, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=5, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=4, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=3, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=1, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=3, type='p', col='red')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red')
res = markowitz(10000)
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='l')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='l')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='l')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='a')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='k')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='m')
plot(rnorm(10), rnorm(10), pch=20, las=2, type='p', col='red', bty='l')
plot(rnorm(10), rnorm(10), pch=20, las=1, type='p', col='red', bty='l')
res = markowitz(10000)
res[which.max(res), ]
res[which.min(res), ]
res = markowitz(10000)
res = t(res)
row.names(res) = assets
res[which.max(res), ]
res[which.min(res), ]
library('Rsolnp')
markowitz2 = function(w){
v = t(w)%*%cov(ret)%*%w
return(v)
}
eq = function(w){
sum(w)
}
w = runif(length(assets), 0, 1)
w = w/sum(w)
res = solnp(w,      #starting values
markowitz2,   #function to optimise
eqfun=eq,     #equality function
eqB=1,        #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', round(v1,6))
res1 = data.frame(assets, pes)
View(res1)
print(res1)
for(i in 1:length(assets)){
cat('\033[2;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[3;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[4;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[4;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[6;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[5;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[5;035m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[1;035m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
res = solnp(w,      #starting values
markowitz2,   #function to optimise
eqfun=eq,     #equality function
eqB=1,        #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
for(i in 1:length(assets)){
cat('\033[1;035m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
res = markowitz(10000)
