d = pred_marcos('risco',  df, df_teste, cl, cclas = 1)
d
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=df[-3], y = df$risco)
print(clas2)
prev2 = predict(clas2, newdata = df_teste, 'raw')
print(prev2)
print(prev2)
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
library(readxl)
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 30))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 30))
cat('A-priori probabilities:\n')
print(a)
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
#cat(nm[g], '\n')
}
dimnames(M) = list(c(), c('mean', 'variance'), nm)
return(M)
}
cc = naive_marcos2('sex', teste)
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
P = array(0, dim = c(2, 1, ta))
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = nm
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
o = p('sex', teste, cc, 5, 188, cclas = 0)
o
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
colnames(p_new) = nm
}
return(p_new)
}
height = c(5.4, 5.8, 6, 5)
weight = c(170, 183, 188, 188)
dfn = data.frame(height, weight)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 30))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 30))
cat('A-priori probabilities:\n')
print(a)
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
#cat(nm[g], '\n')
}
dimnames(M) = list(c(), c('mean', 'variance'), nm)
return(M)
}
cc = naive_marcos2('sex', teste)
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
head(df_teste)
head(df_teste)
predf('risco', df, df_teste, cl, cclas = 0, cd=1)
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=df[-3], y = df$risco)
#print(clas2)
prev2 = predict(clas2, newdata = df_teste, 'raw')
print(prev2)
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=df[-3], y = df$risco)
print(clas2)
prev2 = predict(clas2, newdata = df_teste, 'raw')
print(prev2)
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=df[-3], y = df$risco)
print(clas2)
prev2 = predict(clas2, newdata = df_teste)
print(prev2)
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=df[-3], y = as.factor(df$risco))
print(clas2)
prev2 = predict(clas2, newdata = df_teste, 'raw')
print(prev2)
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=df[-3], y = as.factor(df$risco))
#print(clas2)
prev2 = predict(clas2, newdata = df_teste)
print(prev2)
head(teste)
knitr::kable(head(teste), caption = 'My second dataset', label = 'Elaborate by author.')
cl2 = naivef('sex', teste, cd=0)
cl2
head(dfn)
predf('sex',teste, dfn, cl, cclas = 0, cd=1)
predf('sex',teste, dfn, cl, cclas = 0, cd=0)
predf('sex',teste, dfn, cl, cclas = 0, cd=1)
predf('sex',teste, dfn, cl, cclas =1, cd=0)
predf('sex',teste, dfn, cl2, cclas =1, cd=0)
View(teste)
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=teste[-3], y = as.factor(teste$sex))
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=teste[-3], y = as.factor(teste$sex))
library(e1071) # library to work with naive bayes
clas2 = naiveBayes(x=teste[-3], y = as.factor(teste$sex))
library(e1071) # library to work with naive bayes
clas3 = naiveBayes(x=teste[-3], y = as.factor(teste$sex))
library(e1071) # library to work with naive bayes
clas3 = naiveBayes(x=teste[-3], y = teste$sex)
prev3 = predict(clas3, newdata = dfn)
print(prev3)
library(e1071) # library to work with naive bayes
clas3 = naiveBayes(x=teste[-3], y = teste$sex)
prev3 = predict(clas3, newdata = dfn, 'raw')
print(prev3)
library(ggplot2)
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`))+geom_point()
library(ggplot2)
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`))+geom_point()
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=as.factor(`sex`)))+geom_point()
sex = as.factor(teste$sex)
teste$sex = as.factor(teste$sex)
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`))+geom_point()
sex
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`)) + geom_point()
teste
library(readxl)
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`)) + geom_point()
teste <- read_excel("teste.xlsx")
library(readxl)
teste <- read_excel("teste.xlsx")
setwd("D:/Git projects/college_works/ML_1")
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`)) + geom_point()
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=sex)) + geom_point()
ggplot(data=teste, aes(x=`Weight`, y=`height`, colour=`sex`)) + geom_point()
ggplot(data=teste, aes(x=`weight`, y=`height`, colour=`sex`)) + geom_point()
teste
as.matrix(teste)
ggplot(data=as.matrix(teste), aes(x=`weight`, y=`height`, colour=`sex`)) + geom_point()
ggplot(data=as.data.frame(teste), aes(x=`weight`, y=`height`, colour=`sex`)) + geom_point()
attach(teste)
ggplot(data=as.data.frame(teste), aes(x=weight, y=height, colour=sex)) + geom_point()
colnames(teste) = c('h1', 'w1', 'sex')
ggplot(data=teste, aes(x=w1, y=h1, colour=sex)) + geom_point()
teste
teste = as.data.frame(teste)
teste
teste <- read_xlsx("teste.xlsx")
teste
teste <- read.csv("teste.csv")
teste <- read.csv("teste.csv")
teste
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste
ggplot(data=teste, aes(x=w1, y=h1, colour=sex)) + geom_point()
colnames(teste) = c('h1', 'w1', 'sex')
attach(teste)
library(ggplot2)
ggplot(data=teste, aes(x=w1, y=h1, colour=sex)) + geom_point()
teste
teste <- read.csv("teste.csv")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point()
attach(teste)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point()
#attach(teste)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point()
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)
geom_vline (160)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)
geom_vline (xintercept =  160)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)
geom_vline (yintercept =  160)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)+
geom_vline (yintercept =  160)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)+
geom_vline (xintercept =  160)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)+
geom_vline (xintercept =  160) + geom_hline (yintercept =  5.6)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)+
geom_vline (xintercept =  160) + geom_hline (yintercept =  5.5)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)+
geom_vline (xintercept =  160) + geom_hline (yintercept =  5.55)
library(ggplot2)
ggplot(data=teste, aes(x=weight, y=height, colour=sex)) + geom_point(size=5)+
geom_vline (xintercept =  160) + geom_hline (yintercept =  5.55)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)
#geom_vline (xintercept =  160) + geom_hline (yintercept =  5.55)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =5)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =5, slope = 5)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =5, slope = 3)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =5, slope = 2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =5, slope = 1)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =5, slope = 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =2, slope = 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept =20, slope = 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(yintercept=2, slope = 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(yintercept=3, slope = 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(yintercept=3, slope =- 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=3, slope =- 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=7, slope =- 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=5, slope =- 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=4, slope =- 1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=4, slope =- 2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=4, slope =2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=4, slope =0.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=4, slope =-0.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=4, slope =-1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=3, slope =-1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)+geom_abline(intercept=5, slope =-1.2)
library(ggplot2)
ggplot(data=df, aes(x=divida, y=historia, colour=risco)) + geom_point(size=5)+
geom_abline(xintercept=2, slope = 1.2)
install.packages("caret")
setwd("D:/Git projects/Finance/Finance_R")
#--------- Libraries
library(tseries)
library(timeSeries)
library(fGarch)
library(quantmod)
#----------- My function to get data
get_data = function(x, d= "2000-01-01"){
z = getSymbols(x, src='yahoo',
from= d,
periodicity = "monthly",
auto.assign = F)[,4]
return(z)
}
#-------  know data availability
ativos = c('ITUB4.SA',
'VALE3.SA',
'BBDC4.SA',
'PETR4.SA',
'B3SA3.SA',
'PETR3.SA',
'ABEV3.SA',
'BBAS3.SA',
'ITSA4.SA',
'LREN3.SA',
'JBSS3.SA',
'BBDC3.SA',
'IRBR3.SA',
'GNDI3.SA',
'MGLU3.SA',
'SUZB3.SA',
'BRFS3.SA',
'UGPA3.SA',
'RENT3.SA',
'RAIL3.SA',
'WEGE3.SA',
'BBSE3.SA',
'RADL3.SA',
'VIVT4.SA',
'EQTL3.SA',
'BRDT3.SA',
'GGBR4.SA',
'CCRO3.SA',
'SBSP3.SA',
'LAME4.SA',
'COGN3.SA',
'SULA11.SA',
'AZUL4.SA',
'SANB11.SA',
'BRML3.SA',
'EMBR3.SA',
'HAPV3.SA',
'HYPE3.SA',
'BPAC11.SA',
'NTCO3.SA',
'PCAR4.SA',
'YDUQ3.SA',
'EGIE3.SA',
'CMIG4.SA',
'VVAR3.SA',
'TIMP3.SA',
'BTOW3.SA',
'KLBN11.SA',
'ELET3.SA',
'QUAL3.SA',
'CSAN3.SA',
'TOTS3.SA',
'CIEL3.SA',
'CRFB3.SA',
'CSNA3.SA',
'FLRY3.SA',
'MULT3.SA',
'ELET6.SA',
'CYRE3.SA',
'BRAP4.SA',
'BRKM5.SA',
'TAEE11.SA',
'ENBR3.SA',
'GOAU4.SA',
'MRVE3.SA',
'CVCB3.SA',
'USIM5.SA',
'GOLL4.SA',
'IGTA3.SA',
'HGTX3.SA',
'MRFG3.SA',
'ECOR3.SA',
'SMLS3.SA')
#  Getting assets with date since 2000
know_data = function(z){
k= get_data(z)
s = index(k)[1]
return(s)
}
t = c()
for (i in ativos) {
#  print(know_data(i))
t[i] = know_data(i)
}
View(t)
# convert t to a date format
library(zoo)
out = as.Date(t)
out = sort(out)    # sort by date
out = data.frame(out)
View(out)
sort_names = rownames(out)
sort_names[1:23]  # assets that date begin in 2000-01-01
#----------- Getting this assets
assets = sort_names[1:23]
assets
df = data.frame(lapply(assets, get_data))
basicStats(df)
# Replace nas by mean
for(i in 1:length(df)){
df[ ,i] = ifelse(is.na(df[,i]),
(mean(df[,i], na.rm = T)),
df[,i] )
}
basicStats(df)
nl = sum((df[,1]>0)*1)
df = df[-nl,]
nl = sum((df[,1]>0)*1)
# calculating returs
ret = data.frame(matrix(nrow =(nl-1), ncol=length(assets)))
for(i in 1:length(assets)){
ret[ ,i] = diff(log(df[,i]))
}
colnames(ret) = assets
#------------- Aplying PCA algorithm
library(caret)
pca = preProcess(x= ret, method = 'pca', pcaComp = 1)
pca = predict(pca, ret)
install.packages("caret")
install.packages("caret")
pca = preProcess(x= ret, method = 'pca', pcaComp = 1)
pca = predict(pca, ret)
data = seq(as.Date("2000-2-1"), as.Date("2020-4-1"), by = "month")
ret = xts(ret, order.by = data)
pca = xts(pca, order.by = data)
View(assets)
