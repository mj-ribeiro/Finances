tol = 1e-5
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
l = -log(theta) - sum(y)/(theta*length(y))
while (g>tol) {
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
theta = theta - 0.2*g/h
l = -log(theta) - sum(y)/(theta*length(y))
cat("\033[0;44m")
cat('theta=', theta, '\n')
cat('Likelihood =', l, '\n')
}
y = c(3.5, 1, 1.5)
theta = 1
tol = 1e-5
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
l = -log(theta) - sum(y)/(theta*length(y))
while (g>tol) {
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
theta = theta - 0.6*g/h
l = -log(theta) - sum(y)/(theta*length(y))
cat("\033[0;44m")
cat('theta=', theta, '\n')
cat('Likelihood =', l, '\n')
}
rweibull(20, shape = 1, scale = 2)
set.seed(10)
hist(rweibull(20, shape = 1, scale = 2))
hist(rweibull(200, shape = 1, scale = 2))
hist(rweibull(200, shape = 1, scale = 2))
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
set.seed(10)
hist(rweibull(200, shape = 1, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = 10, scale = 2))
hist(rweibull(200, shape = -10, scale = 2))
hist(rweibull(200, shape = 1, scale = 2))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 20))
hist(rweibull(200, shape = 1, scale = 2))
hist(rweibull(200, shape = 1, scale = 2))
y = c(3.5, 1, 1.5)
theta = 1
tol = 1e-5
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
l = -log(theta) - sum(y)/(theta*length(y))
while (g>tol) {
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
theta = theta - 0.6*g/h
l = -log(theta) - sum(y)/(theta*length(y))
cat("\033[0;44m")
cat('theta=', theta, '\n')
cat('Likelihood =', l, '\n')
}
f = 1/theta * exp(-y/theta)
1258/89
14.13+77
y = c(3.5, 1, 1.5)
theta = 1
tol = 1e-5
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
l = -log(theta) - sum(y)/(theta*length(y))
while (g>tol) {
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
theta = theta - 0.6*g/h
l = -log(theta) - sum(y)/(theta*length(y))
cat("\033[0;44m")
cat('theta=', theta, '\n')
cat('Likelihood =', l, '\n')
}
f = 1/theta * exp(-y/theta)
hist(y)
plot(y, f, type = 'p')
y = c(3.5, 1, 1.5)
theta = 1
tol = 1e-6
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
l = -log(theta) - sum(y)/(theta*length(y))
while (g>tol) {
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
theta = theta - 0.6*g/h
l = -log(theta) - sum(y)/(theta*length(y))
cat("\033[0;44m")
cat('theta=', theta, '\n')
cat('Likelihood =', l, '\n')
}
f = 1/theta * exp(-y/theta)
hist(y)
plot(y, f, type = 'p')
y = c(3.5, 1, 1.5)
theta = 1
tol = 1e-6
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
l = -log(theta) - sum(y)/(theta*length(y))
while (g>tol) {
g = -1/theta + sum(y)/(length(y)*theta^2)
h = 1/theta^2 - (2*sum(y))/(length(y)* theta^3)
theta = theta - 0.6*g/h
l = -log(theta) - sum(y)/(theta*length(y))
cat("\033[0;44m")
cat('theta=', theta, '\n')
cat('Likelihood =', l, '\n')
}
f = 1/theta * exp(-y/theta)
hist(y)
plot(y, f, type = 'p')
10/110
110*0.3
110*(0.5-0.091)
45/150
0.15*(1200*(0.75-6))
(1200*(0.75))
(1200*(6))
0.15*900
0.15*7200
18-135
117/1080
1/0.15
library(propagate)
x = rnorm(1000)
y = rnorm(1000)
bigcor(x, y)
bigcor(x, y,  fun = c("cor", "cov"))
cor(x, y,  fun = c("cor", "cov"))
cor(x, y)
cov(x, y)
cov2cov(x, y)
cov2cor(x, y)
cov(x, y)
install.packages('covidbr')
library(covidbr)
library('covidbr')
8.8-7.34
#************************************************************************************
#                               MARKOWITZ MODEL
#************************************************************************************
setwd("D:/Git projects/Finance/Finance_R")
library(tseries)
library(timeSeries)
library(fGarch)
library(quantmod)
#----------- My function to get data
get_data = function(x, d= "2000-01-01"){
z = getSymbols(x, src='yahoo',
from= d,
periodicity = "monthly",
auto.assign = F)[,4]
return(z)
}
#************ Assets that i want
assets = c("VALE3.SA", "PETR4.SA", "PETR3.SA", "ABEV3.SA", "BBAS3.SA", "ITSA4.SA",
"LREN3.SA","BBDC3.SA", "BRFS3.SA", "WEGE3.SA", "RADL3.SA", "VIVT4.SA", "SBSP3.SA",
"LAME4.SA","EMBR3.SA", "CMIG4.SA", "VVAR3.SA", "ELET3.SA", "CSNA3.SA", "CYRE3.SA",
"ENBR3.SA","USIM5.SA", "HGTX3.SA")
df = data.frame(lapply(assets, get_data))
#******* replace nas by mean
for(i in 1:length(df)){
df[ ,i] = ifelse(is.na(df[,i]),
(mean(df[,i], na.rm = T)),
df[,i] )
}
basicStats(df)
nl = sum((df[,1]>0)*1)
df = df[-nl,]
nl = sum((df[,1]>0)*1)
#*********** calculating returs
ret = data.frame(matrix(nrow =(nl-1), ncol=length(assets)))
for(i in 1:length(assets)){
ret[ ,i] = diff(log(df[,i]))
}
colnames(ret) = assets
library('optimx')
markowitz2 = function(w){
w = w/sum(w)
v = t(w)%*%cov(ret)%*%w
return(v)
}
res = optim(w, markowitz2, lower = 0, upper = 1,
method = 'L-BFGS-B')
w = runif(length(assets))
w = w/sum(w)
res = optim(w, markowitz2, lower = 0, upper = 1,
method = 'L-BFGS-B')
sum(res$par)
res
a = matrix(c(1, -1, sum(w)), 3, 1, byrow = T)
b = c(0, -1, 1)
a
res = ConstrOptim(w, markowitz2,a ,b
method = 'L-BFGS-B')
res = ConstrOptim(w, markowitz2,a ,b,
method = 'L-BFGS-B')
library('optimx')
res = ConstrOptim(w, markowitz2,a ,b,
method = 'L-BFGS-B')
res = constrOptim(w, markowitz2,a ,b, method = 'L-BFGS-B')
a = matrix(c(1, -1), 2, 1, byrow = T)
b = c(0, -1)
res = constrOptim(w, markowitz2,a ,b, method = 'L-BFGS-B')
res = constrOptim(w, markowitz2,a ,b')
sum(res$par)
res
res = constrOptim(w, markowitz2,a ,b)
res = constrOptim(w, markowitz2,a ,b)
)
ppp
}
{}
''
res = constrOptim(w, markowitz2, a , b)
res = constrOptim(w, markowitz2, NULL, a , b)
sum(res$par)
res
max(res$par)
min(res$par)
a = matrix(c(1, -1, sum(w)), 3, 1, byrow = T)
b = c(0, -1, 1)
res = constrOptim(w, markowitz2, NULL, a , b)
w = runif(length(assets))
w = w/sum(w)
a = matrix(c(1, -1, sum(w)), 3, 1, byrow = T)
b = c(0, -1, -1)
res = constrOptim(w, markowitz2, NULL, a , b)
sum(res$par)
w = runif(length(assets))
w = w/sum(w)
a = matrix(c(1, -1, -sum(w)), 3, 1, byrow = T)
b = c(0, -1, -1)
res = constrOptim(w, markowitz2, NULL, a , b)
sum(res$par)
w = runif(length(assets))
w = w/sum(w)
a = matrix(c(1, -1, sum(w)), 3, 1, byrow = T)
b = c(0, -1, 1)
res = constrOptim(w, markowitz2, NULL, a , b)
sum(w[1:length(assets)])
a = matrix(c(1, -1, sum(w[1:length(assets)])), 3, 1, byrow = T)
b = c(0, -1, 1)
res = constrOptim(w, markowitz2, NULL, a , b)
a = matrix(c(1, -1, sum(w[1:length(assets)])), 3, 1, byrow = T)
b = c(0, -1, -1)
res = constrOptim(w, markowitz2, NULL, a , b)
sum(res$par)
library('Rsolnp')
eq = function(w){
sum(w)
}
solnp(w, #starting values (random - obviously need to be positive and sum to 15)
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint
LB=c(0), #lower bound for parameters i.e. greater than zero
UB=c(1)) #upper bound for parameters (I just chose 100 randomly)
solnp(w, #starting values (random - obviously need to be positive and sum to 15)
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(1)) #upper bound for parameters (I just chose 100 randomly)
solnp(w, #starting values (random - obviously need to be positive and sum to 15)
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters (I just chose 100 randomly)
res = solnp(w, #starting values (random - obviously need to be positive and sum to 15)
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters (I just chose 100 randomly)
res$pars
sum(res$pars)
w = runif(length(assets), 0, 1)
res$values
View(res)
res
res$values[3]
v1 = res$values[3]
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
sum(res$pars)
res$values[3]
pes = res$pars
View(pes)
rownames(pes) = assets
pes = t(pes)
rownames(pes) = assets
pes = res$pars
View(assets)
rownames(pes) = assets
rownames(pes) = t(assets)
library(zoo)
pes = as.zoo(pes)
rownames(pes) = assets
pes = res$pars
rownames(pes) = assets
for(i in 1:length(assets)){
cat(assets[i],'-------', pes[i])
}
for(i in 1:length(assets)){
cat(assets[i],'-------', pes[i])
cat('\n')
}
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i]), 4)
cat('\n')
}
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 4))
cat('\n')
}
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
rownames(pes) = assets
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
w = runif(length(assets), 0, 1)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
res$values
res$values[length(res$values)]
w = runif(length(assets), 0, 1)
w = w/sum(w)
res = solnp(w, #starting values
markowitz2, #function to optimise
eqfun=eq, #equality function
eqB=1,   #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', v1)
cat('A variância do modelo é dada por:', round(v1,5) )
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[1;034m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', round(v1,6))
data.frame(pes, assets)
data.frame(assets, pes)
res = data.frame(assets, pes)
View(res)
markowitz = function(x){
v = c()
w = matrix(nrow = x, ncol = length(assets))
for(i in 1:x){
w[i, ] = runif(length(assets), 0, 1)
w[i, ] = w[i, ]/sum(w[i, ])
v[i] = t(w[i, ])%*%cov(ret)%*%w[i, ]
}
cat('A variância mínima é:', round(min(v), 4))
cat('\n')
pes = w[(which.min(v)), ]
pes = t(pes)
colnames(pes) = assets
pes = data.frame(pes)
return(pes)
}
res = markowitz(20000)
res = t(res)
row.names(res) = assets
res[which.max(res), ]
res[which.min(res), ]
res = markowitz(50000)
w = runif(length(assets), 0, 1)
w = w/sum(w)
res = solnp(w,      #starting values
markowitz2,   #function to optimise
eqfun=eq,     #equality function
eqB=1,        #the equality constraint. Obviously is one
LB=c(rep(0, length(assets))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(assets)))) #upper bound for parameters i.e less than one
v1 = res$values[3]
sum(res$pars)
pes = res$pars
for(i in 1:length(assets)){
cat('\033[1;033m')
cat(assets[i],'-------', round(pes[i], 5))
cat('\n')
}
v1 = res$values[length(res$values)]
cat('A variância do modelo é dada por:', round(v1,6))
cat(res1)
res1 = data.frame(assets, pes)
cat(res1)
print(res1)
