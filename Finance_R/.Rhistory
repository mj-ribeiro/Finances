from= '1999-12-01',
to = '2020-04-01',
# periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
View(ibov)
ret = diff(log(ibov))
colnames(ret) = c('ret')
ret = ret[is.na(ret)==F]  # Drop na to work
gspec.ru <- ugarchspec(mean.model=list(armaOrder=c(0,0)))
gfit1 <- ugarchfit(gspec.ru, ret)
gfit1
ts.plot(sigma(garch2))
ts.plot(sigma(garch2))
ts.plot(sigma(gfit1))
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-12-01',
to = '2020-04-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
ret = diff(log(ibov))
colnames(ret) = c('ret')
ret = ret[is.na(ret)==F]  # Drop na to work
spec1 = ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(2,2)),
mean.model=list(armaOrder=c(1,0), include.mean=TRUE),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
ts.plot(sigma(garch2))
spec1 = ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(3,4)),
mean.model=list(armaOrder=c(1,0), include.mean=TRUE),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
ts.plot(sigma(garch2))
ts.plot(sigma(garch2))
ts.plot(sigma(garch2))
ts.plot(sigma(garch2))
ts.plot(sigma(garch2))
ts.plot(sigma(garch2))
garch2
spec1 = ugarchspec(variance.model=list(model="sGARCH", garchOrder=c(3,4)),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
garch2
ts.plot(sigma(garch2))
ts.plot(sigma(garch2**2))
plot(ret**2)
model4 = train(as.factor(x) ~., data=df2, trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi,data=df2 , trControl = control_train,
method='nnet', threshold = 0.4)
model4
confusionMatrix(model4)
table(df2$x)
ovun.sample(x, data=df2, method="under", N, p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
#--- Rose library
library(Rose)
#--- Rose library
library('Rose')
#--- Rose library
library(ROSE)
ovun.sample(x, data=df2, method="under", N, p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
ovun.sample(x, data=df2, method="under", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
ovun.sample(as.factor(x), data=df2, method="under", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
View(df2)
ovun.sample(as.factor(x)~., data=df2, method="under", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
ifelse(df2$x==2, 0, df2$x )
df2$x
CMAX = function(w, n, s){
l = matrix(nrow=n,ncol = (w+1))
max = matrix(nrow=n, ncol = 1)
cmax = matrix(nrow=n, ncol = 1)
for (j in 1:n){
l[j, 1:(w+1)] = s[j:(w+j)]
max[j] = max(l[j, 1:(w+1)])
cmax[j] = l[j, (w+1)]/max(max[j])
}
return(cmax)
}
# Libraries
library(tseries)
library(timeSeries)
library(quantmod)
library(fGarch)
library(GetBCBData)
# Get data
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-04-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
cm2 = CMAX(12,(length(ibov)-12), ibov )
var1 = quantile(cm2, 0.05)
hist(-cm2, breaks = 15, col='lightgreen',
probability = T,
main='Histograma para o CMAX diário \n com 24 janelas')
abline(v=var1)
lim = mean(cm2)-2*sd(cm2)
cm2[cm2<lim]
sum((cm2<lim)*1)   # count
# get the data of ibov
data = index(ibov)
data1 = data[13:length(ibov)]
# transform cmax in xts object
cmts = xts(x=cm2, order.by = data1)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<lim, 1, 0)
crise = ifelse(cm2>0.9, 2, crise)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
for(i in 1:length(pos)){
crise[(pos[i]-12):pos[i]] = 1
}
plot(crise, type='l')
table(crise)
table(crise)
prop.table(table(crise))
crise = xts(crise, order.by = data1)
plot(crise)
#---- create data frame
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
ret = ret[data]
# transform data in data frame
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
### save in rds file
saveRDS(df, 'df.rds')
source('D:/Git projects/Finance/Finance_R/data_ecofin.R')
source('D:/Git projects/Finance/Finance_R/data_ecofin.R')
source('D:/Git projects/Finance/Finance_R/data_ecofin.R')
source('D:/Git projects/Finance/Finance_R/data_ecofin.R')
cb
saveRDS(df, 'df.rds')
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
saveRDS(df, 'df.rds')
pca = readRDS('pca.rds')
df = readRDS('df.rds')
table(df2$x)
df2 = df[-1, ]
df2$pca = pca2
df2 = ifelse(df2$x==2, 0, df2$x )
table(df2$x)
pca = readRDS('pca.rds')
df = readRDS('df.rds')
pca2 = pca[-243]
df2 = df[-1, ]
df2$pca = pca2
View(df2)
df2$x = ifelse(df2$x==2, 0, df2$x )
table(df2$x)
ovun.sample(as.factor(x)~., data=df2, method="under", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
df3 = ovun.sample(as.factor(x)~., data=df2, method="under", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
View(df3)
View(df3)
View(df3)
df3
table(df3$x)
View(df3)
View(df3$data)
table(df3$data$x)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model4 = train(as.factor(x) ~., data=df2, trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.3)
data.frame(df3)
as.data.frame(df3)
df3 = ovun.sample(as.factor(x)~., data=df2, method="over", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
as.data.frame(df3)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.3)
ovun.sample(as.factor(x)~., data=df2, method="over", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
as.data.frame(df3)
data.frame(df3)
data.frame(df3$data)
df3 = data.frame(df3$data)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cb,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cb + pca,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + pca,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + pca,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2+ cb + cdi + pca,data=df3 , trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2+ cb + cdi + pca,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.7)
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 2)
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.2)
confusionMatrix(model4)
df3 = ovun.sample(as.factor(x)~., data=df2, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed)
df3 = data.frame(df3$data)
table(df3$x)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.2)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2+ cb + cdi + pca,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2+ cb + cdi,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2+ cb,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi +cb,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
View(oil)
plot(oil)
data = index(cmts)
data = index(cb)
oil =oil[data]
df = data.frame(ret, vix, cb, crise, cdi, oil)
View(cb)
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-03-01',
auto.assign = F)[,4]
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-03-01',
auto.assign = F)[,4]
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
oil =oil[data]
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
ret = ret[data]
# transform data in data frame
df = data.frame(ret, vix, cb, crise, cdi, oil)
df = data.frame(ret, vix, cb, crise, cdi)
oil =oil[data]
View(oil)
View(df)
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
colnames(oil) = 'oil'
View(oil)
data = index(cmts)
oil =oil[data]
df = data.frame(ret, vix, cb, crise, cdi, oil)
View(oil)
View(df)
df = data.frame(ret, vix, cb, crise, cdi, oil[data])
df = data.frame(ret, vix, cb, crise, cdi)
df$oil[3:] = oil
merge(df, oil, by=index(df))
merge(df, oil, by=index(oil))
merge(df, oil)
merge(df, oil, by=c(index(df), index(oil)))
merge(df, oil, by=c(index(df))
merge(df, oil, by=c(index(df)))
merge(df, oil, by='index(df)')
ind = index(oil)
merge(df, oil, by='ind')
merge(df, oil, by='row.names')
View(oil)
oil =oil[data]
oil
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-03-01',
auto.assign = F)[,4]
View(gold)
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
View(gold)
gold = gold[data]
df = data.frame(ret, vix, cb, crise, cdi, gold)
merge(df, oil,gold, by='row.names')
merge(df, oil, gold, by='row.names')
merge(df, oil, by='row.names')
df = merge(df, oil, by='row.names')
View(df)
df = merge(df, gold, by='row.names')
df = data.frame(ret, vix, cb, crise, cdi)
df = merge(df, gold, by='row.names')
df = merge(df, oil, by='row.names')
View(df)
View(df)
df = data.frame(ret, vix, cb, crise, cdi)
View(df)
df = merge(df, gold, by='row.names')
df4 = merge(df, oil, by='row.names')
View(df4)
d = df$Row.names
df$Row.names = NULL
View(df)
row.names(df) = d
df4 = merge(df, oil, by='row.names')
View(df4)
df = merge(df, oil, by='row.names')
d = df$Row.names
df$Row.names = NULL
row.names(df) = d
View(df)
colnames(gold) = 'gold'
old = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
colnames(gold) = 'gold'
df = data.frame(ret, vix, cb, crise, cdi)
df = merge(df, gold, by='row.names')
d = df$Row.names
df$Row.names = NULL
row.names(df) = d
df = merge(df, oil, by='row.names')
d = df$Row.names
df$Row.names = NULL
row.names(df) = d
saveRDS(df, 'df.rds')
pca = readRDS('pca.rds')
df = readRDS('df.rds')
pca2 = pca[-243]
View(pca)
pca2 = pca[-243]
pca2 = pca[-1]
df2$pca = pca2
df2$x = ifelse(df2$x==2, 0, df2$x )
table(df2$x)
df3 = ovun.sample(as.factor(x)~., data=df2, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
View(df3$data)
table(df3$x)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.2)
confusionMatrix(model4)
model4
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.4)
confusionMatrix(model4)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
plot(model4)
plot(model4$finalModel)
plot(model4$coefnames)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + cb + gold,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + cb + oil,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + cb,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + oil,data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
View(df3)
df = readRDS('df.rds')
View(df)
df2 = df
df2$pca = pca2
pca = readRDS('pca.rds')
pca2 = pca[-1]
pca2 = pca[-243]
df2$pca = pca2
View(df2)
df2$pca = pca2
View(pca2)
pca2 = pca[-243]
pca2 = pca[-1]
basicStats(pca2)
df2$pca = pca2
View(pca)
pca2 = pca
pca2 = pca2[-243]
pca2 = pca
pca2 = pca2[-1]
pca2 =pac2[-242]
pca2 =pca2[-242]
df2 = df
df2$pca = pca2
df2$x = ifelse(df2$x==2, 0, df2$x )
table(df2$x)
df3 = ovun.sample(as.factor(x)~., data=df2, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
table(df3$x)
model4 = train(as.factor(x) ~., data=df3, trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + gold, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + gold + cb, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cb + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret + cdi + gold + cb, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model4 = train(as.factor(x) ~ vix + ret**2 + cdi + gold + oil, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
install.packages("MRSP")
