abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
plot(ret)
windows()
par(mfrow=c(1,2))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano')
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
plot(ret)
plot(ret)
plot(ctms)
par(mfrow=c(1,2))
plot(ret)
plot(ctms)
plot(ctms)
par(mfrow=c(1,2))
plot(ret)
plot(cmts)
length(ibov)
data1 = data[length(24:length(ibov)]
data1 = data[length(25:length(ibov)]
basicStats(data)
data1 = data[25:length(ibov)]
cmts = xts(x=cm2, order.by = data1)
windows()
par(mfrow=c(1,2))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano')
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano')
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
View(cmts)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano')
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
par(mfrow=c(1,2))
plot(ret)
plot(cmts)
VaR1 = quantile(cmts, 0.05)
VaR2 = quantile(cmts, 0.01)
hist(cm2, breaks = 35, col='lightgreen', probability = T,
main='Histograma para o CMAX diário \n com 24 janelas')
abline(v=VaR1)
abline(v=VaR2)
par(mfrow=c(1,1))
hist(cm2, breaks = 35, col='lightgreen', probability = T,
main='Histograma para o CMAX diário \n com 24 janelas')
abline(v=VaR1)
abline(v=VaR2)
abline(v=med)
par(mfrow=c(1,1))
hist(cm2, breaks = 35, col='lightgreen', probability = T,
main='Histograma para o CMAX diário \n com 24 janelas')
abline(v=VaR1)
abline(v=VaR2)
abline(v=med)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
pos = which(crise==1)   # pegar a posição onde crise== 1
for (c in 1:length(pos)){
crise[(pos[c]-24):pos[c]] = 1
}
pos
crise[(13-12):13] = 1
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
pos
crise[1:13]
crise[1:14]
crise[1:50]
pie(table(crise), radius = 1)
text(locator(n=1),
paste(round(prop.table(table(crise))[1],
digits=2)*100,"%"))
text(locator(n=1),
paste(round(prop.table(table(crise))[2],
digits=2)*100,"%"))
basicStats(crise)
basicStats(cmts)
rownames(crise) = index(cmts)
View(crise)
View(cmts)
#----
xts(crise, order.by =  index(cmts) )
#----
crise = xts(crise, order.by =  index(cmts) )
View(crise)
df = df[crise(index)]
df = df[index(crise)]
df = df[index(crise), 1:3]
df$crise = crise
View(df)
df = data.frame(cb, ibov[index(cb)], vix[index(cb)] )
View(crise)
vix[index(crise)]
vix = vix[index(crise)]
View(vix)
cb = cb[index(crise)]
df = data.frame('vix', 'cb', 'crise')
View(df)
View(cb)
df = data.frame('vix', 'cb', 'crise')
View(df)
View(vix)
data.frame(date=index(index(cmts)), coredata(vix, cb, crise))
df = data.frame(date=index(index(cmts)), coredata(vix, cb, crise))
View(df)
df = data.frame(date=index(index(cmts)), coredata(c(vix, cb, crise))
df = data.frame(date=index(index(cmts)), coredata(c(vix, cb, crise)))
df = data.frame(date=index(index(cmts)), coredata(c(vix, cb, crise)))
df = data.frame(date=index(index(cmts)), coredata(c(vix)))
View(df)
crise = xts(crise, order.by =  index(cmts) )
vix = vix[index(crise)]
cb = cb[index(crise)]
vix = as.vector(vix)
cb = as.vector(cb)
crise = as.vector(crise)
df = data.frame('vix', 'cb', 'crise')
View(df)
df = data.frame(vix, cb, crise)
cb = gbcbd_get_series(11768, first.date= '2000-01-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
basicStats(cb)
cb = cb[index(crise)]
basicStats(cb)
crise = xts(crise, order.by =  index(cmts) )
vix = vix[index(crise)]
cb = cb[index(crise)]
df = data.frame(vix, cb, crise)
basicStats(crise)
basicStats(vix)
basicStats(vix)
basicStats(vix)
basicStats(vix)
basicStats(vix)
basicStats(vix)
View(ibov)
vix = vix[index(crise)]
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
vix = vix[index(crise)]
basicStats(vix)
df = data.frame(vix, cb, crise)
basicStats(VIX)
basicStats(vix)
basicStats(CB)
basicStats(cb)
crise = xts(crise, order.by =  index(cb) )
vix = vix[index(cb)]
crise =cb[index(cb)]
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
View(df)
df$date = NULL
View(df)
cb = cb[index(crise)]
crise =cb[index(cb)]
vix = vix[index(cb)]
df = data.frame(vix, cb, crise)
View(df)
View(cb)
View(vix)
View(crise)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
pos = which(crise==1)   # pegar a posição onde crise== 1
#crise[(13-12):13] = 1   # gambiarras haha
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
cb = cb[index(crise)]
crise =crise[index(cb)]
vix = vix[index(cb)]
df = data.frame(vix, cb, crise)
View(df)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
#crise[(13-12):13] = 1   # gambiarras haha
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
cb = cb[index(crise)]
View(crise)
crise = crise[index(cmts)]
cb = cb[index(crise)]
View(cb)
#----
data = index(cmts)
crise = crise[data]
cb = cb[data]
vix = vix[data]
df = data.frame(vix, cb, crise)
data = index(cb)
crise = crise[data]
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
#crise[(13-12):13] = 1   # gambiarras haha
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
View(crise)
#----
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
View(crise)
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
View(crise)
View(df)
df$date = NULL
0.4/0.6
setwd("D:/Git projects/Finance/Finance_R")
#------------- CMAX Function
# w é o tamanho da janela
# é a quantidade de janelas
# s é o vetor que vou passar a função
CMAX = function(w, n, s){
l = matrix(nrow=n,ncol = (w+1))
max = matrix(nrow=n, ncol = 1)
cmax = matrix(nrow=n, ncol = 1)
for (j in 1:n){
l[j, 1:(w+1)] = s[j:(w+j)]
max[j] = max(l[j, 1:(w+1)])
cmax[j] = l[j, (w+1)]/max(max[j])
}
return(cmax)
}
# Libraries
library(tseries)
library(timeSeries)
library(quantmod)
library(fGarch)
library(GetBCBData)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-01-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
# VIX
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
# 11768 - Índice da taxa de câmbio real (INPC)
cb = gbcbd_get_series(11768, first.date= '2000-01-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
cm2 = CMAX(24, (length(ibov)-24), ibov)
hist(cm2, breaks = 35, col='lightgreen',
main='Histograma para o CMAX diário \n com 24 janelas')
basicStats(cm2)
lim = mean(cm2)-2*sd(cm2)
cm2[cm2<lim]
sum((cm2<lim)*1)   # count
# get the data of ibov
data = index(ibov)
data1 = data[25:length(ibov)]
cmts = xts(x=cm2, order.by = data1)
library(zoo)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano')
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
#crise[(13-12):13] = 1   # gambiarras haha
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<med, 1, 0)  # definition of crise
lim = mean(cm2)-2*sd(cm2)
crise = ifelse(cm2<lim, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
library(caTools)  # split data
control_train = trainControl(method = 'cv', number = 10)    # ten fold
control_train = trainControl(method = 'cv', number = 10)    # ten fold
library(caret)   # library to cross validation
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(crise ~., data=df, trControl = control_train, method='mlp')
model4
model4 = train(crise ~., data=df, trControl = control_train, method='mlp')
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='mlp')
model4
model3 = train(crise ~., data=df, trControl = control_train, method='glm', family='binomial')
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='glm', family='binomial')
model3
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='nnet')
model4
model5 = train(as.factor(crise) ~., data=df, trControl = control_train, method='svmRadial')
model5
confusionMatrix(model5)
model5$results
sum((crise==1)*1)
sum((crise==0)*1)
View(df)
pos
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<lim, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
plot(cm2)
plot(cm2, type='l')
abline(h=lim)
df = df[100:150, 1:3]
df = data.frame(vix, cb, crise)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
df = df[1:110, 1:3]
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='nnet')
model4
confusionMatrix(model4)
df = df[1:90, 1:3]
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='nnet')
View(df)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<lim, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
plot(cm2, type='l')
abline(h=lim)
#crise[(13-12):13] = 1   # gambiarras haha
for (c in 6:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
View(df)
df = df[1:90, 1:3]
View(df)
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='nnet')
model4
confusionMatrix(model4)
table(df$crise)
prop.table(table(df$crise))
34/30
30/34
model3
confusionMatrix(model3)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='glm', family='binomial')
model3
confusionMatrix(model3)
confusionMatrix(model5)
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model5 = train(as.factor(crise) ~., data=df, trControl = control_train, method='svmRadial')
model5
confusionMatrix(model5)
confusionMatrix(model4)
model4 = train(crise ~., data=df, trControl = control_train, method='knn')
model6 = train(as.factor(crise) ~., data=df, trControl = control_train, method='knn')
model6
confusionMatrix(model6)
d = ovun.sample(crise ~ ., data = df, method = "over",N = 1960)$data
install.packages("ROSE")
library(ROSE)
d = ovun.sample(crise ~ ., data = df, method = "over",N = 1960)$data
prop.table(table(d$crise))
View(d)
d = ovun.sample(crise ~ ., data = df, method = "over",N = 90)$data
prop.table(table(d$crise))
prop.table(table(df$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 90, p=0.6)$data
d = ovun.sample(crise ~ ., data = df, method = "over",N = 90)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 80)$data
d = ovun.sample(crise ~ ., data = df, method = "over",N = 100)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 110)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 120)$data
prop.table(table(d$crise))
model4 = train(as.factor(crise) ~., data=d, trControl = control_train, method='nnet')
model4
confusionMatrix(model4)
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 240)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 300)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 400)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 350)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "over",N = 370)$data
prop.table(table(d$crise))
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(as.factor(crise) ~., data=d, trControl = control_train, method='nnet')
model4
confusionMatrix(model4)
model3 = train(as.factor(crise) ~., data=d, trControl = control_train, method='glm', family='binomial')
model3
confusionMatrix(model3)
model5 = train(as.factor(crise) ~., data=d, trControl = control_train, method='svmRadial')
model5
confusionMatrix(model5)
model6 = train(as.factor(crise) ~., data=d, trControl = control_train, method='knn')
model6
confusionMatrix(model6)
confusionMatrix(model4)
confusionMatrix(model5)
d = ovun.sample(crise ~ ., data = df, method = "under",N = 370, seed=1)$data
d = ovun.sample(crise ~ ., data = df, method = "under",N = 218, seed=1)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "under",N = 100, seed=1)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "under",N = 120, seed=1)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "under",N = 80, seed=1)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "under",N = 50, seed=1)$data
prop.table(table(d$crise))
d = ovun.sample(crise ~ ., data = df, method = "under",N = 60, seed=1)$data
prop.table(table(d$crise))
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(as.factor(crise) ~., data=d, trControl = control_train, method='nnet')
model4
confusionMatrix(model4)
