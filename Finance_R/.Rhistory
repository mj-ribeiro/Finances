H_trf(x1)
#----------------------------------------- w tilde  (Proposition 1)
w_tilf = function(x1){
w_til = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
w_til[c, j] = ( (1 - x1[c, j, 1]) / ( (1 + x1[c, j, 2]) ** eta) ) * H_tr[j]**varphi * x1[c, j, 3] * s[c]**phi[c] * (1 - s[c]) ** ( (1- eta) /beta )
}
}
return (w_til)
}
H_tr = runif(4)
#--------------------------- w_r
w_rf = function(){
w_r = w_til**theta
w_r = colSums(w_r)
return(w_r)
}
w_r = w_rf()
#------------------------------------------ p_ir  (eq 19)
p_irf = function(){
p_ir = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
p_ir[c, j] = (( w_til[c, j] )) ** theta / w_r[c]
}
}
p_i = colSums(p_ir)
return (p_ir)
}
p_irf()
(-2)^0.44
#---------------------------------------  W (eq 27)
Wf = function(x1){
W = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
W[c, j] = ((1 - s[c])**(-1/beta))/( 1 - x1[c, j, 1] )*gamma1*eta*(w_r[j])**(1/(theta*(1 - eta)))
}
}
return (W)
}
#--------- Simulated data
W_t = rbind(c(0.1, 0.42, 0.33, 0.12), c(0.99, 0.22, 0.154, 0.654))
p_t = rbind(c(0.122, 0.12, 0.132, 0.109), c(0.212, 0.453, 0.3524, 0.114))
#--------------------- OBJECTIVE FUNCTION
p_ir = p_irf()
w = runif(i*r, 0, 1)
tau_w =  runif(i*r, -1, 1)
tau_h = runif(i*r, -1, 1)
x1 = array( c(tau_w, tau_h, w), dim = c(i, r, 3))*0.5
obj(x1)
obj = function(x1){
s = sf()
h_til = h_tilf()
w_til = w_tilf(x1)
w_r = w_rf()
p_ir = p_irf()
#H_tr = H_trf(x1)
W = Wf(x1)
f1 = matrix(0, i, r)
f2 = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
d1 = sum(f1)
d2 = sum(f2)
D = d1 + d2
return(D)
}
obj(x1)
#-------------------------- Solve
library('Rsolnp')
library('optimx')
res = optim(x1, obj)
w_til = w_tilf(x1)
w_rf = function(){
w_r = w_til**theta
w_r = colSums(w_r)
return(w_r)
}
w_rf()
res = optim(x1, obj)
res = optim(x1, obj)
x2 = rbind(tau_w, tau_h, w)
x2
x2
H_trf = function(x1){
s = sf()
P = matrix(0, 1, r)
Ti = matrix(0, i, r)
S = matrix(0, i, 1)
N = matrix(0, i, r)
H = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
S[c] = ( s[c]**phi[c]*eta**eta ) ** kappa
P[j] = ( ( ( 1 - colSums(x1[1, ])[j] ) / ( ( 1 + colSums(x1[2, ])[j] )**eta) ) * ( colSums(x1[3, ])[j] ) ) ** (theta - kappa)
Ti[c, j] = ( ( 1 - x1[1, j] ) * x1[3, j] ) ** ( theta - kappa +kappa*eta)
N[c, j] = ( 1 + x1[c, j, 2]) ** (eta*theta)
H[c, j] = ( ( Ti[c, j] * S[c] * gamma1 ) / ( N[c, j] * P[j]) ** (1/(1-varphi*kappa)))
H_tr = H[i-1, ]
}
}
return (H_tr)
}
H_trf(x2)
x2 = rbind(tau_w, tau_h, w)
x2
x2 = matrix(tau_w, tau_h, w, nrow = i*3, ncol = r)
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w = runif(i*r, 0, 1)
w
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w = rbind( runif(i*r, 0, 1), nrow=i, ncol=r )
w = rbind( runif(i*r, 0, 1), nrow=i, ncol=r )
tau_w =  rbind(runif(i*r, -1, 1), nrow=i, ncol=r )
tau_h = rbind(runif(i*r, -1, 1), nrow=i, ncol=r )
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w
w = matrix( runif(i*r, 0, 1), nrow=i, ncol=r )
w
w = matrix( runif(i*r, 0, 1), nrow=i, ncol=r )
tau_w =  matrix(runif(i*r, -1, 1), nrow=i, ncol=r )
tau_h = matrix(runif(i*r, -1, 1), nrow=i, ncol=r )
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w
x2 = rbind(c(tau_w, tau_h, w))
x2
install.packages('caRamel')
library('caRamel')
res = caRamel(x1, obj)
View(res)
res = caRamel(x1, func=obj)
res = caRamel(nobj=3, x1, func=obj)
res = caRamel(nobj=3, nvar=x1, func=obj)
res = caRamel(nobj=1, nvar=3, func=obj)
res = caRamel(nobj=2, nvar=3, func=obj)
res = polyopt(nobj=2, nvar=3, func=obj)
res = polyopt(x1, obj)
res = polyopt(x1, obj, gr=NULL)
df = data.frame(tau_w, tau_h, w)
df[1]
df[2]
df[3]
View(df)
rm(df)
w = runif(i*r, 0, 1)
tau_w =  runif(i*r, -1, 1)
tau_h = runif(i*r, -1, 1)
df = data.frame(tau_w, tau_h, w)
df[3]
df[1]
View(df)
View(df)
res = polyopt(x1, obj, gr=NULL)
res = solnp(x1,      #starting values
obj,   #function to optimise
LB=c(rep(0, length(x1))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(x1)))) #upper bound for parameters i.e less than one
obj(x1)
w_r = w_rf()
obj(x1)
res = solnp(x1,      #starting values
obj,   #function to optimise
LB=c(rep(0, length(x1))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(x1)))) #upper bound for parameters i.e less than one
res = optim(x1,      #starting values
obj)   #function to optimise
setwd("D:/Git projects/Finance/Finance_R")
#------------- CMAX Function
# w é o tamanho da janela
# é a quantidade de janelas
# s é o vetor que vou passar a função
CMAX = function(w, n, s){
l = matrix(nrow=n,ncol = (w+1))
max = matrix(nrow=n, ncol = 1)
cmax = matrix(nrow=n, ncol = 1)
for (j in 1:n){
l[j, 1:(w+1)] = s[j:(w+j)]
max[j] = max(l[j, 1:(w+1)])
cmax[j] = l[j, (w+1)]/max(max[j])
}
return(cmax)
}
# Libraries
library(tseries)
library(timeSeries)
library(quantmod)
library(fGarch)
library(GetBCBData)
# Get data
ibov = getSymbols('^BVSP', src='yahoo',
from= '1995-01-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
# VIX
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '1995-01-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
# Oil price
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '1995-01-01',
auto.assign = F)[,4]
colnames(oil) = 'oil'
# Gold price
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '1995-01-01',
auto.assign = F)[,4]
colnames(gold) = 'gold'
# 11768 - Índice da taxa de câmbio real (INPC)
cb = gbcbd_get_series(11768, first.date= '1995-01-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
# cdi
cdi = gbcbd_get_series(4391, first.date= '1995-01-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cdi$ref.date
cdi[,1]= NULL
cdi = xts(cdi, order.by = data)
rownames(cdi) = data    # colocar a data como índice
plot(cdi)
# PTAX
ptax = getSymbols('BRL=X', src='yahoo',
from= '2000-01-01',
periodicity = "monthly",
auto.assign = F)[,4]
#-------- Descriptive stats
plot(cdi)
basicStats(cdi)
View(cdi)
View(cdi)
df = data.frame(cb[index(oil)], ibov[index(oil)], vix[index(oil)], gold[index(oil)], oil[index(oil)])
df = data.frame(cb[index(oil)], ibov[index(oil)], vix[index(oil)], gold[index(oil)], oil)
vix[index(oil)]
# Get data
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
# VIX
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
# Oil price
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
auto.assign = F)[,4]
colnames(oil) = 'oil'
# Gold price
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
auto.assign = F)[,4]
colnames(gold) = 'gold'
# 11768 - Índice da taxa de câmbio real (INPC)
cb = gbcbd_get_series(11768, first.date= '2000-01-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
cdi = gbcbd_get_series(4391, first.date= '2000-01-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cdi$ref.date
cdi[,1]= NULL
cdi = xts(cdi, order.by = data)
rownames(cdi) = data    # colocar a data como índice
plot(cdi)
rm(ptax)
df = data.frame(cb[index(oil)], ibov[index(oil)], vix[index(oil)], gold[index(oil)], oil)
cdi = gbcbd_get_series(4391, first.date= '2000-01-01', last.date = ''2020-04-01'',
format.data = "long", be.quiet = FALSE)[ ,1:2]
cdi = gbcbd_get_series(4391, first.date= '2000-01-01', last.date = '2020-04-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cdi$ref.date
cdi[,1]= NULL
cdi = xts(cdi, order.by = data)
rownames(cdi) = data    # colocar a data como índice
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
colnames(oil) = 'oil'
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-04-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-04-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
cb = gbcbd_get_series(11768, first.date= '2000-01-01', last.date = '2020-04-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
df = data.frame(cb[index(oil)], ibov[index(oil)], vix[index(oil)], gold[index(oil)], oil)
apply(df[,1:3], 2, basicStats)
ret = diff(log(ibov))
basicStats(ret)
ret = ret[is.na(ret)==F]
cm2 = CMAX(12,(length(ibov)-12), ibov )
var1 = quantile(cm2, 0.05)
hist(-cm2, breaks = 15, col='lightgreen',
probability = T,
main='Histograma para o CMAX diário \n com 24 janelas')
abline(v=var1)
lim = mean(cm2)-2*sd(cm2)
cm2[cm2<lim]
sum((cm2<lim)*1)   # count
# get the data of ibov
data = index(ibov)
data1 = data[7:length(ibov)]
# transform cmax in xts object
cmts = xts(x=cm2, order.by = data1)
library(zoo)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
library(zoo)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
cmts = xts(x=cm2, order.by = data1)
data1 = data[13:length(ibov)]
cmts = xts(x=cm2, order.by = data1)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<lim, 1, 0)
crise = ifelse(cm2>0.9, 2, crise)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
for(i in 1:length(pos)){
crise[(pos[i]-3):pos[i]] = 1
}
plot(crise, type='l')
table(crise)
prop.table(table(crise))
crise = xts(crise, order.by = data1)
plot(crise)
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
df = data.frame(vix, cb, crise, cdi)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
ret = ret[data]
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
library(caret)   # library to cross validation
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model4 = train(as.factor(crise) ~., data=df, trControl = control_train,
method='nnet', threshold = 0.3)
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
basicStats(df)
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2, classProbs = FALSE)    # ten fold
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2, classProbs = T)    # ten fold
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model3 = train(crise ~., data=df, trControl = control_train, method='multinom', family='binomial')
model3 = train(crise ~., data=df, trControl = control_train, method='multinom', family='binomial')
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
model3 = train(as.factor(df$crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
model3 = train(as.factor(crise) ~., data=df, trControl = control_train, method='multinom', family='binomial')
model3
model3 = train(as.factor(crise) ~., data=df,
trControl = control_train,
method='multinom', family='binomial')
View(df)
model3 = train(as.factor(x) ~., data=df,
trControl = control_train,
method='multinom', family='binomial')
model3
confusionMatrix(model3)
model4 = train(as.factor(x) ~., data=df, trControl = control_train,
method='nnet', threshold = 0.3)
model4
confusionMatrix(model4)
library(rose)
library(ROSE)
df2 = ovun.sample(x ~ ., data = df, method = "over")
library(imbalance)
d = mwmote(df, numInstances = 500, classAttr = "x")
View(d)
table(df$x)
View(df)
df = data.frame(ret, vix, cb, crise, cdi)
View(df)
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(ret, vix, cb, crise, cdi)
View(df)
rm(df)
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
ret = ret[data]
df = data.frame(ret, vix, cb, crise, cdi)
View(df)
View(vix)
View(df)
View(crise)
colnames(ret) = 'ret'
View(cdi)
colnames(cdi) = 'cdi'
colnames(cb) = 'cb'
df = data.frame(ret, vix, cb, crise, cdi)
View(crise)
crise = crise[data]
df = data.frame(ret, vix, cb, crise, cdi)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
library(ROSE)
table(df$x)
df2 = ovun.sample(x ~ ., data = df, method = "over")
df2 = ovun.sample(as.factor(x) ~ ., data = df, method = "over")
table(df$x)
readRDS(pca)
readRDS(pca.rds)
readRDS('pca.rds')
pca = readRDS('pca.rds')
View(pca)
df = data.frame(ret, vix, cb, crise, cdi, pca[index(cb)])
df2 = df[index(pca)]
df2 = df[index(pca), ]
df2 = data.frame(ret, vix, cb, crise, cdi, pca)
View(df2)
model4 = train(as.factor(x) ~., data=df, trControl = control_train,
method='nnet', threshold = 0.3)
model4
confusionMatrix(model4)
model3 = train(as.factor(x) ~., data=df,
trControl = control_train,
method='multinom', family='binomial')
model3
confusionMatrix(model3)
setwd("D:/Git projects/Finance/Finance_R")
saveRDS(df, 'df.rds')
View(df)
