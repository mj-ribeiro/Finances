text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
letters[1:10]
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2020, 1))
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2020, 1))
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
seq(2000, 2020, 1)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2020, 1))
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(2, at=1:20, labels=seq(2000, 2020, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2020, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(2, at=1:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(2, at=1:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1), type='l', ylab='CMAX', xlab='Ano', xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xlim=(2000, 2019),
xaxt='n')
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xlim=(2000, 2019),
xaxt='n')
xlim=(2000, 2019,
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xlim=c(2000, 2019),
xaxt='n')
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xlim=c(1, 20),
xaxt='n')
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
)
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xlim=c(2000, 2020))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=2000:2020, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=2000:2019, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2019, 1))
axis(2, at=1:20, labels=seq(2000, 2019, 1))
axis(2, at=3:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(2, at=2:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(2, at=1:19, labels=seq(2000, 2019, 1))
axis(2, at=0:20, labels=seq(2000, 2019, 1))
axis(2, at=1:20, labels=seq(2000, 2019, 1))
axis(1, at=1:20, labels=seq(2000, 2019, 1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2019, 1))
s = seq(1, 20, 1)
plot(s, xaxt='n')
axis(1, at=1:20, labels = seq(1, 20,1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=1:20, labels=seq(2000, 2019, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=1:200, labels=seq(2000, 2019, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=1:30, labels=seq(2000, 2019, 1))
axis(1, at=1:20, labels=seq(2000, 2019, 1))
axis(1, at=1:30, labels=seq(2000, 2019, 1))
axis(1, at=2000:2020, labels=seq(2000, 2019, 1))
axis(1, at=2000:2019, labels=seq(2000, 2019, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=2000:2019, labels=seq(2000, 2019, 1))
axis(1, at=1:20, labels=seq(2000, 2019, 1))
axis(1, at=0:20, labels=seq(2000, 2019, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=100:120, labels=seq(2000, 2019, 1))
axis(1, at=100:119, labels=seq(2000, 2019, 1))
axis(1, at=200:219, labels=seq(2000, 2019, 1))
axis(1, at=seq(1, 200, 20), labels=seq(2000, 2019, 1))
axis(1, at=seq(1, 219, 20), labels=seq(2000, 2019, 1))
seq(1, 220, 20)
axis(1, at=seq(1, 219, 20), labels=seq(2000, 2019, 1))
seq(1, 219, 20)
seq(0, 219, 20)
axis(1, at=seq(0, 219, 20), labels=seq(2000, 2019, 1))
seq(2000, 2019, 1)
seq(0, 220, 15)
seq(0, 220, 10)
seq(0, 200, 10)
axis(1, at=seq(0, 200, 10), labels=seq(2000, 2019, 1))
axis(1, at=seq(0, 200, 10), labels=seq(2000, 2018, 1))
axis(1, at=seq(0, 200, 10), labels=seq(2000, 2019, 1))
axis(1, at=seq(0, 190, 10), labels=seq(2000, 2019, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=seq(0, 190, 10), labels=seq(2000, 2019, 1))
axis(1, at=seq(0, 200, 10), labels=seq(2000, 2020, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=seq(0, 200, 10), labels=seq(2000, 2020, 1))
axis(1, at=seq(20, 200, 10), labels=seq(2002, 2020, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano',
xaxt='n')
axis(1, at=seq(20, 200, 10), labels=seq(2002, 2020, 1))
plot(as.vector(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
#xaxt='n'
#axis(1, at=seq(20, 200, 10), labels=seq(2002, 2020, 1))
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
#xaxt='n'
#axis(1, at=seq(20, 200, 10), labels=seq(2002, 2020, 1))
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<lim, 1, 0)  # definition of crise
View(crise)
sum((crise==1)*1)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
sum((cm2<lim)*1)
crise = xts(crise, order.by = data1)
plot(crise)
cm2 = CMAX(23, (length(ibov)-24), ibov)
hist(cm2, breaks = 35, col='lightgreen',
main='Histograma para o CMAX diário \n com 24 janelas')
lim = mean(cm2)-2*sd(cm2)
cm2[cm2<lim]
sum((cm2<lim)*1)   # count
# get the data of ibov
data = index(ibov)
data1 = data[25:length(ibov)]
# transform cmax in xts object
cmts = xts(x=cm2, order.by = data1)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
#xaxt='n'
#axis(1, at=seq(20, 200, 10), labels=seq(2002, 2020, 1))
abline(h=0.8)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
#xaxt='n'
#axis(1, at=seq(20, 200, 10), labels=seq(2002, 2020, 1))
abline(h=lim)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.7, labels = '11 de setembro', cex=0.8)
sc_ibov = scale(ibov)
basicStats(ibov)
basicStats(sc_ibov)
plot(sc_ibov)
cm3 = CMAX(23, (length(ibov)-24), ibov)
lim2 = mean(sc_ibov-2*sd(sc_ibov))
sd(sc_ibov)
lim2 = mean(sc_ibov)-2*sd(sc_ibov))
lim2 = mean(sc_ibov) -2* sd(sc_ibov)
mean(sc_ibov)
hist(sc_ibov)
plot(cm3)
plot(cm3, type='l')
lim2 = mean(cm3) -2* sd(cm3)
abline(h=lim2)
abline(h=0.7)
plot(cm3, type='l')
abline(h=0.7)
lim2 = mean(cm3) -1* sd(cm3)
plot(cm3, type='l')
abline(h=0.75)
plot(cm3, type='l')
abline(h=0.7)
#lim = mean(cm2)-2*sd(cm2)
lim = 0.7
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<lim, 1, 0)  # definition of crise
sum((crise==1)*1)
crise = xts(crise, order.by = data1)
plot(crise)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
plot(cm2, type='l')
abline(h=lim)
pos
pos
length(pos)
for (c in 7:length(pos)){
crise[(pos[c]-12):pos[c]] = 1
}
View(crise)
crise[pos[10]:21]
crise[pos[]:21]
crise[pos[9]:21]
pos
crise[(pos[9]+1):21]
which(pos)
which(pos==82)
pos[10]
pos[10]+12
crise[(pos[10]+1):pos[10]+12)]=2
crise[(pos[10]+1):(pos[10]+12)]=2
pos
which(pos==83)
which(pos==84)
which(pos==85)
which(pos==87)
which(pos==89)
crise[(pos[9]+1):21]=2
crise[(pos[10]+1):(pos[10]+12)]=2
crise[(pos[11]+1):(pos[11]+12)]=2
crise[(pos[12]+1):(pos[12]+12)]=2
crise[(pos[13]+1):(pos[13]+12)]=2
crise[(pos[14]+1):(pos[14]+12)]=2
crise[(pos[15]+1):(pos[15]+12)]=2
crise[(pos[16]+1):(pos[16]+12)]=2
crise[(pos[17]+1):(pos[17]+12)]=2
pos
which(pos==170)
crise[(pos[18]+1):(pos[18]+12)]=2
crise[(pos[19]+1):(pos[19]+12)]=2
crise[(pos[20]+1):(pos[20]+12)]=2
crise[(pos[20]]=2
crise[(pos[20])=2
crise[(pos[20]] = 2
crise[pos[20]] = 2
table(crise)
prob.table(table(crise))
prop.table(table(crise))
pie(table(crise), radius = 1)
pie(table(crise), radius = 1)
text(locator(n=1),
paste(round(prop.table(table(crise))[1],
digits=2)*100,"%"))
text(locator(n=1),
paste(round(prop.table(table(crise))[2],
digits=2)*100,"%"))
text(locator(n=1),
paste(round(prop.table(table(crise))[3],
digits=2)*100,"%"))
pie(table(crise), radius = 1)
text(locator(n=1),
paste(round(prop.table(table(crise))[1],
digits=2)*100,"%"))
text(locator(n=1),
paste(round(prop.table(table(crise))[2],
digits=2)*100,"%"))
text(locator(n=1),
paste(round(prop.table(table(crise))[3],
digits=2)*100,"%"))
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
# transform data in data frame
df = data.frame(vix, cb, crise)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
View(cb)
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
View(cb)
View(cdi)
data = cdi$ref.date
cb[,1]=NULL
View(cdi)
cdi[,1]= NULL
cdi = xts(cdi, order.by = data)
rownames(cdi) = data    # colocar a data como índice
View(cb)
data = index(cmts)
crise = xts(crise, order.by = data)
cb = cb[data]
vix = vix[data]
data = index(cb)
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
df = data.frame(vix, cb, crise, cdi)
df = data.frame(date=index(index(cb)), coredata(df))
df$date = NULL
control_train = trainControl(method = 'timeslice')    # ten fold
library(caret)   # library to cross validation
control_train = trainControl(method = 'timeslice')    # ten fold
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='nnet')
control_train = trainControl(method = 'timeslice', horizon = 12, window=24)    # ten fold
# Neural net
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model4 = train(as.factor(crise) ~., data=df, trControl = control_train, method='nnet')
model4 = train(crise ~., data=df, trControl = control_train, method='nnet')
# Neural net
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(crise ~., data=df, trControl = control_train, method='nnet')
View(df)
model4 = train(x ~., data=df, trControl = control_train, method='nnet')
basicStats(df)
# Neural net
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(x ~., data=df, trControl = control_train, method='nnet')
View(df)
model3 = train(as.factor(x) ~., data=df, trControl = control_train, method='glm', family='binomial')
warnings()
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2, threshold = 0.3)    # ten fold
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.2)
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.05)
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.01)
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.04)
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.9)
model4
confusionMatrix(model4)
# Neural net
control_train = trainControl(method = 'cv', number = 5)    # ten fold
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.9)
# Neural net
control_train = trainControl(method = 'cv', number = 15)    # ten fold
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.9)
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
base = read.csv('census.csv')
library(neuralnet)
NN = neuralnet(x~., df, hidden = 3, linear.output = T)
NN
plot (NN)
Summary(NN)
summary(NN)
View(NN)
NN[["response"]]
prev =NN[["response"]]
confusionMatrix(prev, df$x)
View(prev)
table(prev, df$x)
# Neural net
control_train = trainControl(method = 'cv', number = 2)    # ten fold
model4 = train(x ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
model5 = train(as.factor(x) ~., data=df, trControl = control_train, method='svmRadial')
model5
confusionMatrix(model5)
# Neural net
control_train = trainControl(method = 'cv', number = 10)    # ten fold
model4 = train(as.factor(x) ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
confusionMatrix(model4)
# Neural net
control_train = trainControl(method = 'timeslicing', number = 10)    # ten fold
model4 = train(as.factor(x) ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
# Neural net
control_train =trainControl(method = "timeslice",
initialWindow = 36,
horizon = 12,
fixedWindow = T,
allowParallel = T,
seeds = seeds)
# Neural net
control_train =trainControl(method = "timeslice",
initialWindow = 36,
horizon = 12,
fixedWindow = T,
allowParallel = T,
seeds = 1)
model4 = train(as.factor(x) ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
# Neural net
control_train =trainControl(method = "timeslice",
initialWindow = 36,
horizon = 12,
fixedWindow = T,
allowParallel = T)
model4 = train(as.factor(x) ~., data=df, trControl = control_train, method='nnet', threshold = 0.3)
model4
confusionMatrix(model4)
d = ovun.sample(crise ~ ., data = df, method = "under",N = 60, seed=1)$data
library(ROSE)
d = ovun.sample(crise ~ ., data = df, method = "under",N = 60, seed=1)$data
d = ovun.sample(x ~ ., data = df, method = "under",N = 60, seed=1)$data
d = ovun.sample(as.factor(x) ~ ., data = df, method = "under",N = 60, seed=1)$data
model3 = train(as.factor(x) ~., data=df, trControl = control_train, method='glm', family='binomial')
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model3 = train(as.factor(x) ~., data=df, trControl = control_train, method='glm', family='binomial')
model3
confusionMatrix(model3)
warnings()
model6 = train(as.factor(crise) ~., data=d, trControl = control_train, method='knn')
model6 = train(as.factor(x) ~., data=df, trControl = control_train, method='knn')
model6
confusionMatrix(model6)
library(imbalance)
install.packages(imbalance)
install.packages('imbalance')
library(imbalance)
d = mwmote(df, numInstances = 100)
imbalanceRatio(df)
imbalanceRatio(df$x)
imbalanceRatio(df)
imbalanceRatio(x)
imbalanceRatio(df$x)
d = racog(df, numInstances = 100)
d = mwmote(df, numInstances = 100, classAttr = "Class")
d = mwmote(df, numInstances = 100, classAttr = "x")
plotComparison(df, rbind(df, d), attrs = names(d)[1:3])
View(df)
plotComparison(df, rbind(df, d), attrs = names(d)[-3])
plotComparison(df, rbind(df, d), attrs = names(d)[3])
plotComparison(df, rbind(df, d), attrs = names(d)[1:3], classAttr = "x")
plotComparison(df, rbind(df, d), attrs = names(d)[-3], classAttr = "x")
plotComparison(df, rbind(df, d), attrs = names(d)[3])
plotComparison(df, rbind(df, d), attrs = d$x)
plotComparison(df, rbind(df, d), classAttr = d$x)
NN = neuralnet(x~., d, hidden = 3, linear.output = T)
plot (NN)
table(d)
table(d$x)
View(d)
d = mwmote(df, numInstances = 500, classAttr = "x")
table(d$x)
View(df)
View(df)
View(df)
which(vix==13.54)
NN = neuralnet(x~., df[1:192], hidden = 3, linear.output = T)
NN = neuralnet(x~., df[1:192, ], hidden = 3, linear.output = T)
d = df[1:192, ]
NN = neuralnet(x~., d, hidden = 3, linear.output = T)
plot (NN)
d_test = df[193:218, ]
prev = predict(NN, d_test)
table(d[,3], prev)
table(d_test[,3], prev)
prev = ifelse(prev>0.5, 1,0)
table(d_test[,3], prev)
c = table(d_test[,3], prev)
confusionMatrix(c)
