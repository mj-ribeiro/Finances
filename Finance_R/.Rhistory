abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
plot(dd, main='Drowdown')
abline(h=(0.72-1))
plot(dd, main='Drowdown')
abline(h=(0.72-1))
windows()
par(mfrow=c(1,1))
plot(as.zoo(cmts), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
cc = cmts - 1
windows()
par(mfrow=c(1,1))
plot(as.zoo(cc), main = 'CMAX- W24', ylim=c(0.5, 1),
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
View(cc)
View(cc)
plot(cc)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cc), main = 'CMAX- W24', ylim=c(-0.1, -0.5),
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cc), main = 'CMAX- W24',
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
hist(dd)
hist(-dd)
sort(dd)
sort(dd, decreasing = F)
o = sort(dd, decreasing = F)
View(o)
o
View(o, by=dd)
o = sort(dd, decreasing = F, by=dd)
o
o = sort(as.vector(dd), decreasing = F)
o
View(o)
library(fitdistrplus)
library(propagate)
fitDistr(o)
fitDistr(-o)
fit = fitDistr(-o)
plot(fit)
summary(fit)
plot
plot(fit)
View(fit)
plot(fit$fitted)
plot(fit$fitted, -o)
fitdist(-o, 'beta')
fitdist(-o, 'beta', method = 'qme')
fitdist(-o, 'beta')
fit$par
fit$bestpar
dbeta(-o, 0.86300, 2.153837)
do = dbeta(-o, 0.86300, 2.153837)
plot(do, -o)
plot(-o, do)
do = dbeta(-o, 0.86300, 2.153837, lower.tail=F)
do = dbeta(-o, 0.86300, 2.153837, lower.tri =F)
library(sn)
fit$bestpar
do = dbeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
library( ExtDist)
install.packages(' ExtDist')
library( ExtDist)
install.packages('ExtDist')
install.packages('fitteR')
library('fitteR')
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
Attaching package: 'ExtDist'
require('ExtDist')
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
install.packages('extraDistr')
library('extraDistr')
do = dBeta(-o, 0.86300, 2.153837, a=0.0025000, b=1.0421013)
do = dnsbeta(-o, shape1=0.86300, shape2=2.153837, min = 0.0025000, max = 1.0421013)
plot(-o, do)
mean(do)
hist(-do)
lines(plot(-o, do))
hist(-do)
lines((-o, do))
hist(-o)
lines((-o, do))
hist(-o)
lines(do)
hist(-o)
lines(-o, do)
hist(-o, density = T)
lines(-o, do)
hist(-o, probability  = T)
lines(-o, do)
hist(-o, probability  = T)
lines(do,-o)
hist(-o, probability  = T)
lines(do,-o)
hist(-o, probability  = T)
lines(-o,do)
hist(-o, probability  = T, col = 'lightgreen')
lines(-o,do, col='red')
fit = fitDistr(-o)
fit2 = fitDistr(dd)
fit2 = fitDistr(as.vector(dd))
hist(-o, probability  = T, col = 'lightgreen', breaks = 50)
lines(-o,do, col='red')
View(ibov)
View(ibov)
library(xlsx)
getwd()
write.xlsx(ibov)
write.xlsx(ibov, "c:/ibov.xlsx")
write.xlsx(ibov, 'C:/Users/user/Documents/ibov.xlsx")
getwd()
cc = cmts - 1
plot(cc)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cc), main = 'CMAX- W24',
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
write.xlsx(ibov,'C:/Users/user/Documents/ibov.xlsx")
getwd()
cc = cmts - 1
plot(cc)
windows()
par(mfrow=c(1,1))
plot(as.zoo(cc), main = 'CMAX- W24',
type='l', ylab='CMAX', xlab='Ano')
abline(h=lim)
abline(h=0.95)
text(as.Date('2008-10-10'), y=0.55, labels = 'Crise \n de 2008', cex=0.8)
text(as.Date('2020-03-10'), y=0.52, labels = 'Crise \n do COVID-19', cex=0.8)
text(as.Date('2000-03-10'), y=0.6, labels = 'Bolha da \n internet', cex=0.8)
text(as.Date('2001-12-9'), y=0.6, labels = '11 de setembro', cex=0.8)
write.xlsx(ibov,'C:\Users\user\Documents\ibov.xlsx")
write.xlsx(ibov, file = "ibov.xlsx",)
beta = 0.69
eta = 0.25
varphi = 0.25
theta = 3.44
rho = 0.19
kappa = 1/(1- eta)
i = 2
r = 4
gamma1 = gamma(1 - ( (theta*(1-rho)) **(-1) )   * (1 - eta)**(-1)  )
phi = c(0.138, 0.174)
#--------------------------- s - time spent at school   (eq 14)
sf = function(){
s = matrix(0, i, 1)
for (c in 1:i){
print(c)
s[c] = (1 + (1-eta)/ (beta*phi[c]) ) ** (-1)
}
return(s)
}
#------------------------ h_til
s = sf()
h_tilf = function( ){
h_til = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
h_til[c, j] = ( 1 ** varphi * s[c]**phi[c] * eta**eta )**(1 - eta)**(-1)
}
}
return (h_til)
}
#----------------------------------------- Human capital of teachers
w = runif(i*r, 0, 1)
tau_w =  runif(i*r, -1, 1)
tau_h = runif(i*r, -1, 1)
x1 = array( c(tau_w, tau_h, w), dim = c(i, r, 3))
#x1 = np.array( [tau_w, tau_h, w] )
H_trf = function(x1){
s = sf()
P = matrix(0, 1, r)
Ti = matrix(0, i, r)
S = matrix(0, i, 1)
N = matrix(0, i, r)
H = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
S[c] = ( s[c]**phi[c]*eta**eta ) ** kappa
P[j] = ( ( ( 1 - colSums(x1[ , ,1])[j] ) / ( ( 1 + colSums(x1[ , ,2])[j] )**eta) ) * ( colSums(x1[ , ,3])[j] ) ) ** (theta - kappa)
Ti[c, j] = ( ( 1 - x1[c, j, 1] ) * x1[c, j, 3] ) ** ( theta - kappa +kappa*eta)
N[c, j] = ( 1 + x1[c, j, 2]) ** (eta*theta)
H[c, j] = ( ( Ti[c, j] * S[c] * gamma1 ) / ( N[c, j] * P[j]) ** (1/(1-varphi*kappa)))
H_tr = H[i-1, ]
}
}
return (H_tr)
}
H_trf(x1)
#----------------------------------------- w tilde  (Proposition 1)
w_tilf = function(x1){
w_til = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
w_til[c, j] = ( (1 - x1[c, j, 1]) / ( (1 + x1[c, j, 2]) ** eta) ) * H_tr[j]**varphi * x1[c, j, 3] * s[c]**phi[c] * (1 - s[c]) ** ( (1- eta) /beta )
}
}
return (w_til)
}
H_tr = runif(4)
#--------------------------- w_r
w_rf = function(){
w_r = w_til**theta
w_r = colSums(w_r)
return(w_r)
}
w_r = w_rf()
#------------------------------------------ p_ir  (eq 19)
p_irf = function(){
p_ir = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
p_ir[c, j] = (( w_til[c, j] )) ** theta / w_r[c]
}
}
p_i = colSums(p_ir)
return (p_ir)
}
p_irf()
(-2)^0.44
#---------------------------------------  W (eq 27)
Wf = function(x1){
W = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
W[c, j] = ((1 - s[c])**(-1/beta))/( 1 - x1[c, j, 1] )*gamma1*eta*(w_r[j])**(1/(theta*(1 - eta)))
}
}
return (W)
}
#--------- Simulated data
W_t = rbind(c(0.1, 0.42, 0.33, 0.12), c(0.99, 0.22, 0.154, 0.654))
p_t = rbind(c(0.122, 0.12, 0.132, 0.109), c(0.212, 0.453, 0.3524, 0.114))
#--------------------- OBJECTIVE FUNCTION
p_ir = p_irf()
w = runif(i*r, 0, 1)
tau_w =  runif(i*r, -1, 1)
tau_h = runif(i*r, -1, 1)
x1 = array( c(tau_w, tau_h, w), dim = c(i, r, 3))*0.5
obj(x1)
obj = function(x1){
s = sf()
h_til = h_tilf()
w_til = w_tilf(x1)
w_r = w_rf()
p_ir = p_irf()
#H_tr = H_trf(x1)
W = Wf(x1)
f1 = matrix(0, i, r)
f2 = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
d1 = sum(f1)
d2 = sum(f2)
D = d1 + d2
return(D)
}
obj(x1)
#-------------------------- Solve
library('Rsolnp')
library('optimx')
res = optim(x1, obj)
w_til = w_tilf(x1)
w_rf = function(){
w_r = w_til**theta
w_r = colSums(w_r)
return(w_r)
}
w_rf()
res = optim(x1, obj)
res = optim(x1, obj)
x2 = rbind(tau_w, tau_h, w)
x2
x2
H_trf = function(x1){
s = sf()
P = matrix(0, 1, r)
Ti = matrix(0, i, r)
S = matrix(0, i, 1)
N = matrix(0, i, r)
H = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
S[c] = ( s[c]**phi[c]*eta**eta ) ** kappa
P[j] = ( ( ( 1 - colSums(x1[1, ])[j] ) / ( ( 1 + colSums(x1[2, ])[j] )**eta) ) * ( colSums(x1[3, ])[j] ) ) ** (theta - kappa)
Ti[c, j] = ( ( 1 - x1[1, j] ) * x1[3, j] ) ** ( theta - kappa +kappa*eta)
N[c, j] = ( 1 + x1[c, j, 2]) ** (eta*theta)
H[c, j] = ( ( Ti[c, j] * S[c] * gamma1 ) / ( N[c, j] * P[j]) ** (1/(1-varphi*kappa)))
H_tr = H[i-1, ]
}
}
return (H_tr)
}
H_trf(x2)
x2 = rbind(tau_w, tau_h, w)
x2
x2 = matrix(tau_w, tau_h, w, nrow = i*3, ncol = r)
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w = runif(i*r, 0, 1)
w
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w = rbind( runif(i*r, 0, 1), nrow=i, ncol=r )
w = rbind( runif(i*r, 0, 1), nrow=i, ncol=r )
tau_w =  rbind(runif(i*r, -1, 1), nrow=i, ncol=r )
tau_h = rbind(runif(i*r, -1, 1), nrow=i, ncol=r )
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w
w = matrix( runif(i*r, 0, 1), nrow=i, ncol=r )
w
w = matrix( runif(i*r, 0, 1), nrow=i, ncol=r )
tau_w =  matrix(runif(i*r, -1, 1), nrow=i, ncol=r )
tau_h = matrix(runif(i*r, -1, 1), nrow=i, ncol=r )
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w
x2 = rbind(c(tau_w, tau_h, w))
x2
install.packages('caRamel')
library('caRamel')
res = caRamel(x1, obj)
View(res)
res = caRamel(x1, func=obj)
res = caRamel(nobj=3, x1, func=obj)
res = caRamel(nobj=3, nvar=x1, func=obj)
res = caRamel(nobj=1, nvar=3, func=obj)
res = caRamel(nobj=2, nvar=3, func=obj)
res = polyopt(nobj=2, nvar=3, func=obj)
res = polyopt(x1, obj)
res = polyopt(x1, obj, gr=NULL)
df = data.frame(tau_w, tau_h, w)
df[1]
df[2]
df[3]
View(df)
rm(df)
w = runif(i*r, 0, 1)
tau_w =  runif(i*r, -1, 1)
tau_h = runif(i*r, -1, 1)
df = data.frame(tau_w, tau_h, w)
df[3]
df[1]
View(df)
View(df)
res = polyopt(x1, obj, gr=NULL)
res = solnp(x1,      #starting values
obj,   #function to optimise
LB=c(rep(0, length(x1))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(x1)))) #upper bound for parameters i.e less than one
obj(x1)
w_r = w_rf()
obj(x1)
res = solnp(x1,      #starting values
obj,   #function to optimise
LB=c(rep(0, length(x1))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(x1)))) #upper bound for parameters i.e less than one
res = optim(x1,      #starting values
obj)   #function to optimise
source('D:/Git projects/Finance/Finance_R/Hsieh Model.R')
W
Wf = function(x1){
W = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
W[c, j] = ((1 - s[c])**(-1/beta))/( 1 - x1[c, j, 1] )*gamma1*eta*(w_r[j])**(1/(theta*(1 - eta)))
}
}
return (W)
}
Wf()
Wf(x1)
x1
obj(x1)
W_t[1, 3]
W_t[2, 3]
W_t[2, 4]
W_t[2, 4:9]
H_tr = runif(r)
H_tr
obj = function(x1){
x1 = array(x1, dim = c(i, r, 3))
s = sf()
h_til = h_tilf()
w_til = w_tilf(x1)
w_r = w_rf()
p_ir = p_irf()
#H_tr = H_trf(x1)
W = Wf(x1)
f1 = matrix(0, i, r)
f2 = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
d1 = sum(f1)
d2 = sum(f2)
D = d1 + d2
return(D)
}
obj(x1)
obj(x1)
(W[1, 2] - W_t[1, 2])
W = Wf(x1)
(W[1, 2] - W_t[1, 2])
(W[1, 27] - W_t[1, 27])
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
f1 = matrix(0, i, r)
f2 = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
f1
matrix(0, 2, 2)
matrix(0, 2, 20)
matrix(0, 20, 20)
matrix(0, 7, 27)
View(f1)
f1 = matrix(0, 7, 27)
f1
f2 = matrix(0, 7, 27)
f1 = matrix(0, i, r)
f2 = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
as.matrix(W_t)
W_t = as.matrix(W_t)
p_t = as.matrix(p_t)
obj(x1)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
f1 = matrix(0, i, r)
f2 = matrix(0, i, r)
for (c in 1:i){
for (j in 1:r){
f1[c, j] = ( (W[c, j] - W_t[c, j]) / W_t[c, j] ) ** 2
f2[c, j] = ( (p_ir[c, j] - p_t[c, j])  /  p_t[c, j] ) ** 2
}
}
obj(x1)
library('Rsolnp')
library('optimx')
res = optim(x1,      #starting values
obj,
method = 'Nelder-Mead')   #function to optimize
